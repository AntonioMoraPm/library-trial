name: Publish Package to Github

on:
    push:
        branches:
            - main

jobs:
    publish:
        runs-on: ubuntu-latest
        permissions:
            contents: read
            packages: write
            actions: write
        steps:
            - uses: actions/checkout@v4
            # Setup .npmrc file to publish to GitHub Packages
            - uses: actions/setup-node@v4
              with:
                  node-version: "20"
                  registry-url: 'https://npm.pkg.github.com'

            - name: Install Dependencies
              run: npm install
            - name: Check version
              id: check
              run: |
                  CURRENT_VERSION=$(jq -r .version package.json)
                  echo "Current version is $CURRENT_VERSION"
                  LATEST_TAG=$(git describe --tags --abbrev=0 2>\dev\null || echo "v0.0.0")
                  echo "Latest tag is $LATEST_TAG"
                  LATEST_VERSION=${LATEST_TAG#v}

                  if [ "$LATEST_VERSION" != "$CURRENT_VERSION" ]; 
                  then
                    echo "Version changed"
                    echo "version_changed=true" >> $GITHUB_OUTPUT
                    echo "new_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
                  else
                    echo "Version not changed"
                    echo "version_changed=false" >> $GITHUB_OUTPUT
                  fi
            - name: Build
              run: npm run build
              if: steps.check.outputs.version_changed == 'true'
            - name: Publish
              run: npm publish --access public --no-git-checks
              env:
                  NODE_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}
            - name: Tag Release
              if: steps.check.outputs.version_changed == 'true'
              run: |
                  git config --local user.email "github-actions[bot]@users.noreply.github.com"
                   git config --local user.name "github-actions[bot]"
                   git tag -a "v${{ steps.check.outputs.new_version }}" -m "v${{ steps.check.outputs.new_version }}"
                   git push origin "v${{ steps.check.outputs.new_version }}"
